gpbp.distance
=============

.. py:module:: gpbp.distance


Functions
---------

.. autoapisummary::

   gpbp.distance.disk_cache
   gpbp.distance._get_poly_nx
   gpbp.distance._get_poly_pandana
   gpbp.distance.calculate_isopolygons_graph
   gpbp.distance.calculate_isopolygons_Mapbox
   gpbp.distance.population_served


Module Contents
---------------

.. py:function:: disk_cache(cache_dir='cache')

.. py:function:: _get_poly_nx(road_network: networkx.MultiDiGraph, center_node: int, dist_value: int, distance_type: str) -> tuple[geopandas.GeoSeries, geopandas.GeoSeries]

   Get nodes and edges within a specified distance from a certain node in a road network.

   :param road_network: The road network.
   :type road_network: nx.MultiDiGraph
   :param center_node: The node from which to measure the distance.
   :type center_node: int
   :param dist_value: The distance value.
   :type dist_value: int
   :param distance_type: The type of distance (e.g., 'length').
   :type distance_type: str

   :returns: a GeoSeries of the nodes with their osmid and geometry.
             edges_gdf: a GeoSeries of the geometry of the edges.
   :rtype: nodes_gdf

   If an edge (u,v) doesn't have geometry data in G, edges_gdf contains
   a straight line from u to v.

   :raises ValueError if all other nodes are farther than dist_value from center_node:


.. py:function:: _get_poly_pandana(G: pandana.Network, road_node, dist_value, distance_type)

.. py:function:: calculate_isopolygons_graph(X: Any, Y: Any, distance_type: str, distance_values: list[int], road_network: Any, edge_buff: float = 0.0005, node_buff: float = 0.001) -> dict

.. py:function:: calculate_isopolygons_Mapbox(X: Any, Y: Any, route_profile: str, distance_type: str, distance_values: list[int], access_token: str = None)

.. py:function:: population_served(pop_gdf: pandas.DataFrame, fac_gdf: geopandas.GeoDataFrame, data_as_key: str, distance_type: str, distance_values: list[int], route_mode: str, strategy: str, access_token: str = None, road_network: Any = None) -> dict

