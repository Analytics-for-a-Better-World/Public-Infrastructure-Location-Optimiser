gpbp.data_src
=============

.. py:module:: gpbp.data_src


Functions
---------

.. autoapisummary::

   gpbp.data_src.get_admarea_mask
   gpbp.data_src.raster_to_df
   gpbp.data_src.world_pop_data
   gpbp.data_src.fb_pop_data
   gpbp.data_src.rwi_data
   gpbp.data_src.osm_facilities


Module Contents
---------------

.. py:function:: get_admarea_mask(vector_polygon: shapely.geometry.MultiPolygon, raster_layer: rasterio.DatasetReader) -> numpy.ndarray

   Extract mask from raster for a given MultiPolygon

   Return a boolean mask for the raster layer which is True where the polygon is located and false for all points outside
   the given MultiPolygon


.. py:function:: raster_to_df(raster_fpath: str, mask_polygon: shapely.geometry.MultiPolygon) -> pandas.DataFrame

   Convert raster file to a dataframe of longitude, latitude
   and statistical population count

   Function takes the bounds of the raster file in the raster_fpath, draws an evenly spaced sequence of points between
   the xmin & xmax, and between ymin & ymax, and then generates a grid to cover the complete square area inside the
   boundaries. The population count for each point in the grid that falls within the given MultiPolygon area
   (identified by the mask) is extracted from the raster file, and a dataframe with latitude, longitude & population
   count for each point in the raster is returned.


.. py:function:: world_pop_data(country_iso3: str, geometry: shapely.geometry.MultiPolygon) -> pandas.DataFrame

   Get latest worldpop data for an area defined by the MultiPolygon geometry


.. py:function:: fb_pop_data(country_iso3: str, geometry: shapely.geometry.MultiPolygon) -> pandas.DataFrame

   Get 2020 facebook data for an area defined by the MultiPolygon geometry


.. py:function:: rwi_data(country_name: str, geometry: shapely.geometry.MultiPolygon) -> pandas.DataFrame

   Get Facebook Relative Wealth index data defined by the MultiPolygon geometry


.. py:function:: osm_facilities(adm_name: str, geometry: shapely.geometry.MultiPolygon, tags: dict) -> geopandas.GeoDataFrame

   Retrieve facilities specified by the tags parameter for an area defined by the MultiPolygon geometry.

   Return a dataframe where each facility is added with its osmid, longitude, latitude and geometry. If facility is a node
   (point) then its latitude and longitude are the same as the geometry. If facility is a way (line) then its latitude
   and longitude are the centroid of the geometry.


